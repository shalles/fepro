{
  "name": "servermock",
  "version": "2.1.6",
  "description": "not only static server and ajax mock data, support page mock like dynamic page, separation front-end and server. And you can install plugins free",
  "main": "index.js",
  "bin": {
    "servermock": "./bin/index.js"
  },
  "scripts": {
    "test": "servermock start"
  },
  "keywords": [
    "separation",
    "server",
    "mock",
    "mockjson",
    "pagemock"
  ],
  "files": [
    "index.js",
    "plugins",
    "lib",
    "bin",
    "src"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/shalles/servermock.git"
  },
  "bugs": {
    "url": "https://github.com/shalles/servermock/issues"
  },
  "author": {
    "name": "shalles",
    "email": "shalles@163.com",
    "url": "http://shalles.github.io"
  },
  "license": "MIT",
  "dependencies": {
    "chalk": "^1.1.1",
    "urlencode": "^1.1.0",
    "phpjs": "^1.3.2",
    "velocityjs": "^0.7.2",
    "mockjs": "^0.1.10",
    "websocket": "^1.0.21"
  },
  "devDependencies": {
    "jshint": "^2.9.1-rc1"
  },
  "readme": "# servermock\n\n一开始只准备做一个`server`和`mock`数据的小工具，后来发现可以做的事还很多, 分享给大家\n\n## Install\n\n```shell\nsudo npm install servermock -g  \n\n//也可以当做node_module来引用到自己的工具中\nnpm install servermock --save\n\n```\n\n## Usage\n\n```shell\n//启动命令(start) 可跟参数 -p 8089（port） | -i index.html（启动页面）| \n//@p pluginname (插件名) | -py (open/support proxy) | -n auto (时自\n//动获取当前IPv4作为hostname)\nservermock start\n\n//初始化 will generate a sm.config file in current path\nservermock init\n\n//安装删除插件\nservermock plugin [intall | delete] | [-i | -d] [git repository]\n//如:\nservermock plugin intall https://github.com/shalles/synctest.git\n//或\nservermock plugin -i https://github.com/shalles/synctest.git\n\n\n//或作为node模块使用\nrequire('servermock')(config)\n\n```\n\n## Config\n\n启动目录下的配置文件 sm.config\n\n```js\n{\n    \"port\": 8080, // 启动端口 默认80 unix系需要sudo\n    \"hostname\": \"0.0.0.0\", // 当为0.0.0.0时自动获取当前IPv4\n    \"protocol\": \"http\", //https\n    //\"key\": \"~/cert/cert.key\",\n    //\"cert\": \"~cert/cert.crt\",\n    \"main\": \"./index.html\", //default null, not open\n    // 需要使用websocket才配置，使用插件对其有依赖时会覆盖插件的配置\n    // \"websocket\": {  \n    //     \"open\": true,\n    //     \"maxsize\": 10240,\n    //     \"encoding\": \"utf8\",\n    //     // callback: \"console.log('outside: ', data); return 'get data ' + data;\",\n    //     // callback: function(data){\n    //     //     console.log('outside: ', data);\n    //     //     return 'get data ' + data;\n    //     // },\n    //     \"originReg\": \"\", //new RegExp 服务接受原正则匹配\n    //     \"sameOrigin\": true, // 使用同源发送 default: true\n    //     \"broadcast\": true, // 是否广播\n    //     \"mTm\": false, //是否广播到自己\n    //     \"debug\": false //log\n    // },\n    // \n    // 插件 \n    \"plugins\":[{\n        \"name\": \"mock\",\n        \"open\": true,\n        \"param\": {\n            \"datapath\": \"mock/\",\n            \"mockrc\": \".mockrc\", //相对mock datapath 可用绝对路径\n            \"ignore\": [\"html\", \"jpg\", \"png\", \"gif\"],\n            \"regexurl\": { //前面是regex new RegExp()\n                \"com/api/mockdata.do\": \"mockdata.mjson\",\n                \"/static/webapp/src/\": \"filemock.js\",\n                \"/api/1placesuggestion\" : \"placesuggestion.js\", //走js 遵循cmd\n                \"/api/1placesuggestion\" : \"placesuggestion.json\", //\n                \"/api/placesuggestion\" : \"placesuggestion.mjson\" //\n            }\n        }\n    },{\n        \"name\": \"pagemock\",\n        \"open\": true,\n        \"param\": {\n            \"basepath\": \"mock/page\", //\"\", //default: 同级目录\n            \"mockrc\": \"../.mockrc\", //基于basepath 可与mock同用 可用绝对路径\n            \"acceptExts\": [\"php\", \"html\", \"vm\"] //监听的页面扩展\n        }\n    },{// 需要单独安装 servermock plugin -i https://github.com/shalles/synctest.git\n        \"name\": \"synctest\", \n        \"open\": true,\n        \"param\": {\n            //vpn: \"192.168.1.6\",\n            \"exts\": [\"html\", \"php\", \"vm\"]\n        }\n    }]\n}\n```\n\n1. `sm.config`支持单行注释\"//\", 暂不支持多行注释\"/**/\";<br>\n2. 插件按需open;<br>\n3. `protocol`:启动server服务的协议支持`http/https`， 当为https是需要传入key和cert两个证书文件;<br>\n4. main提供的话会在start的时候`启动浏览器打开服务`，不提供则不打开;\n\n更多配置使用请看对应插件 [ **mock readme** ](https://github.com/shalles/servermock/blob/master/plugins/router/mock/README.md) [ **pagemock readme** ](https://github.com/shalles/servermock/blob/master/plugins/content/pagemock/README.md) [ **synctest readme** ](https://github.com/shalles/synctest/blob/master/README.md)\n\n## Plugin\n\n#### 插件安装/删除\n\n```js\n//安装删除插件\nservermock plugin [intall | delete] | [-i | -d] [git repository]\n//如:\nservermock plugin intall https://github.com/shalles/synctest.git\n//或\nservermock plugin -i https://github.com/shalles/synctest.git\n```\n\n#### 插件列表\n\n1. [ **mock** ](https://github.com/shalles/servermock/blob/master/plugins/router/mock/README.md)  `默认自带`<br>\n2. [ **pagemock** ](https://github.com/shalles/servermock/blob/master/plugins/content/pagemock/README.md)  `默认自带`<br>\n3. [ **synctest** ](https://github.com/shalles/synctest/blob/master/README.md)  `需安装`<br>\n4. ...\n\n#### 插件编写\n\n1. 主要实现两个方法`init` 和 `excute`;<br>\n2. init的时候可以拿到用户配置sm.config中serverConfig的一些配置和servermock [utils.js](https://github.com/shalles/servermock/blob/master/lib/utils.js)提供的一些使用方法具体可以看源码，虽然写的很差但会慢慢优化。 主要提倡用utils.log; <br>\n3. 目前提供了两个插件口`content`和`router` 并在excute的时候提供不同的参数和返回值;<br>\n4. 在`package.json`中配置需要servermock提供的支持;\n\n**如下以synctest为例**\n\nsynctest的主要实现原理 <br>   \n1. 监听页面的事件->编辑事件信息;<br>\n2. 用servermock提供的websocket功能将编辑的事件信息广播到链接的其他设备的打开的页面监听client端;<br>\n3. 在接收到事件信息后解析并重构事件;<br>\n4. 触发该事件;<br>\n5. 循环\n\na）. 要在页面监听事件就需要向servermock启动的服务的页面文件中插入脚本，在servemock中属于content类插件即如下package.json中`\"type\"`为`\"content\"`;<br>\nb）. 需要用到servermock的websocket功能则需要配置websocket的信息这是正对servermock配置的，且高于默认配置，低于用户配置;<br>\nc）. 注意:servermock以文件的目录名位插件名，主目录下必须包含主文件`index.js`和`package.json`, package.json与node同用，插件使用node module加载 因此写起来和node语法无异\n\n**package.json**\n\n```js\n    \"servermock\": {\n        \"type\": \"content\",\n        //\"startbasepath\": \"./\", 需要使用启动命令的插件  如 servermock start -p 8800 @p transport\n        \"websocket\": {\n            \"open\": true,\n            \"maxsize\": 10240,\n            \"encoding\": \"utf8\",\n            \"originReg\": \"\",\n            \"sameOrigin\": true,\n            \"broadcast\": true,\n            \"mTm\": false\n        }\n    },\n```\n\n**index.js**\n\n```js\nvar utils,\n    origin,\n    protocol,\n    acceptExtname,\n    plugin = {},\n    path = require('path');\n\nplugin.excute = function (params){\n    \n    if(utils.inArray(params.ext, acceptExtname)){\n        utils.log('[synctest loading]');\n        // do something\n        return params.cnt;\n    }\n}\n\nplugin.init = function(config){\n    var serverConfig = config.__serverConfig; // sm.config中的部分配置信息\n    \n    utils = config.__utils; //utils.js\n    acceptExtname = config.exts || ['html', 'htm'];\n    origin = (config.vpn || serverConfig.hostname) + \":\" + serverConfig.port;\n    protocol = serverConfig.protocol\n\n    /* 使用@p 插件启动参数的插件可能需要传入一些参数\n    return {\n        dirname: __dirname\n    }\n    */\n}\n\nmodule.exports = plugin;\n```\n\n\n**content 与 router下 config**\n\n两个类型的插件在init提供相同的config参数，即`__utils`, `__serverConfig`;\n\n**content下的params**\n\n```js\n//当前请求\nplugins.excute('router', {\n    res: res,           //response mock插件拦截匹配的req，然后res返回mock数据\n    req: req,           //request\n    pathname: pathname, //请求的文件路径\n    extname: extname    //请求的文件扩展\n});\n```\n\n**router下的params**\n\n```js\n// 当前请求\nplugins.excute('content', {\n    cnt: fileContent,   // 请求匹配文件内容\n    stat: fdStat,       // 请求匹配文件的stat信息\n    ext: extname,       // 请求匹配文件的扩展\n    filepath: pathname  // 请求匹配文件的物理路径\n})\n```\n\n**目录结构**\n\n[详情参考实例synctest](https://github.com/shalles/synctest)\n\n**[more see the test demo](https://github.com/shalles/servermock/tree/master/test)**\n",
  "readmeFilename": "README.md",
  "gitHead": "447df5f7cd41e87fb8d6fa8e4429be4fa72255fa",
  "homepage": "https://github.com/shalles/servermock",
  "_id": "servermock@2.1.6",
  "_shasum": "7acc88eb253993a67105fd46741f622db7cdd86d",
  "_from": "servermock@>=2.0.0 <3.0.0",
  "_resolved": "file:servermock"
}
